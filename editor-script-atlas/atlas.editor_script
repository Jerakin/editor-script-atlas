local M = {}

local function image_template(image)
    return [[images {
  image: "]] .. image .. [["
}
]]
end

local function path_segments(path)
    return string.match(path, "(.-)([^\\/]-%.?([^%.\\/]*))$")
end

local function unpack(t, i)
    i = i or 1
    if t[i] ~= nil then
        return t[i], unpack(t, i + 1)
    end
end

local function ends_with(str, ending)
    return ending == "" or str:sub(-#ending) == ending
end

local function is_add_active(opts)
    local atlas = false
    local png = false
    for _, id in pairs(opts.selection) do
        local path = editor.get(id, "path")
        if ends_with(path, ".atlas") then
            if atlas == true then -- Only allow one atlas selected
                return false
            end
            atlas = true
        elseif ends_with(path, ".png") then
            png = true
        end
    end
    return atlas and png
end

local function is_new_active(opts)
    local atlas = false
    local png = false
    for _, id in pairs(opts.selection) do
        local path = editor.get(id, "path")
        if ends_with(path, ".png") then
            png = true
        elseif ends_with(path, ".atlas") then
            atlas = true
        end
    end
    return png and not atlas
end

local function add_to_atlas(opts)
    local atlas
    local new_images_string = ""
    for _, id in pairs(opts.selection) do
        local path = editor.get(id, "path")
        if ends_with(path, ".png") then
            new_images_string = new_images_string .. image_template(path)
        elseif ends_with(path, ".atlas") then
            atlas = path
        end
    end

    -- Get the text
    local atlas_file = io.open("." .. atlas, "r")
    local atlas_text = atlas_file:read("*a")
    atlas_file:close()

    atlas_file = io.open("." .. atlas, "w")
    atlas_file:write(new_images_string .. atlas_text)
    atlas_file:close()
end


local function new_atlas(opts)
    local base_path = path_segments(editor.get(opts.selection[1], "path"))
    local atlas = base_path .. "ATLAS" .. os.date("%Y%m%d%H%M%S") .. ".atlas"
    local atlas_string = ""
    for _, id in pairs(opts.selection) do
        local path = editor.get(id, "path")
        atlas_string = atlas_string .. image_template(path)
    end
    atlas_string = atlas_string .. [[margin: 0
extrude_borders: 2
inner_padding: 0]]

    local atlas_file = io.open("." .. atlas, "w")
    atlas_file:write(atlas_string)
    atlas_file:close()

end

function M.get_commands()
    return {
        {
            label="Add to Atlas...",
            locations = {"Assets"},
            query = {
                selection = {type = "resource", cardinality = "many"}
            },
            active = is_add_active,
            run = add_to_atlas
        },
        {
            label="Create New Atlas...",
            locations = {"Assets"},
            query = {
                selection = {type = "resource", cardinality = "many"}
            },
            active = is_new_active,
            run = new_atlas
        }
    }
end

return M
